# -*- coding: utf-8 -*-
"""
Created on Fri Apr 19 17:52:31 2019

@author: diana
"""
# Import libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Import data sets
df = pd.read_csv("Wine.csv")
x = df.iloc[:, 0:-1]
y = df.iloc[:,-1]

# split into training & testing dataset
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 0)

# scale the features
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(x_train)
X_test = sc.transform(x_test)

# Reduce the dimensions by PCA
from sklearn.decomposition import PCA
pca = PCA(n_components = None)
X_train_pca = pca.fit_transform(X_train)
explained_variance = pca.explained_variance_ratio_

pca = PCA(n_components = 2)
X_train_PCA = pca.fit_transform(X_train)
X_test_PCA = pca.transform(X_test)

# train the logistic model using the principle components
from sklearn.linear_model import LogisticRegression
model = LogisticRegression(random_state = 0)
model.fit(X_train_PCA, y_train)

#using model to predict the testing set
y_pred = model.predict(X_test_PCA)
#Making confusion matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)





#Visualizaing the confusion matrix
from sklearn.utils.multiclass import unique_labels
def plot_confusion_matrix(y_test, y_pred, classes,
                          normalize=False,
                          title=None,
                          cmap=plt.cm.Blues):
    """
    This function prints and plots the confusion matrix.
    Normalization can be applied by setting `normalize=True`.
    """
    if not title:
        if normalize:
            title = 'Normalized confusion matrix'
        else:
            title = 'Confusion matrix, without normalization'
    # Compute confusion matrix
    cm = confusion_matrix(y_test, y_pred)
    
    # Only use the labels that appear in the data
    classes = classes[unique_labels(y_test, y_pred)]
    if normalize:
        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]
        print("Normalized confusion matrix")
    else:
        print('Confusion matrix, without normalization')

    print(cm)

    fig, ax = plt.subplots()
    im = ax.imshow(cm, interpolation='nearest', cmap=cmap)
    ax.figure.colorbar(im, ax=ax)
    # We want to show all ticks...
    ax.set(xticks=np.arange(cm.shape[1]),
           yticks=np.arange(cm.shape[0]),
           # ... and label them with the respective list entries
           xticklabels=classes, yticklabels=classes,
           title=title,
           ylabel='True label',
           xlabel='Predicted label')

    # Rotate the tick labels and set their alignment.
    plt.setp(ax.get_xticklabels(), rotation=45, ha="right",
             rotation_mode="anchor")

    # Loop over data dimensions and create text annotations.
    fmt = '.2f' if normalize else 'd'
    thresh = cm.max() / 2.
    for i in range(cm.shape[0]):
        for j in range(cm.shape[1]):
            ax.text(j, i, format(cm[i, j], fmt),
                    ha="center", va="center",
                    color="white" if cm[i, j] > thresh else "black")
    fig.tight_layout()
    return ax

np.set_printoptions(precision=2)

    # Plot non-normalized confusion matrix
plot_confusion_matrix(y_test, y_pred, classes = y_pred,
                      title='Confusion matrix, without normalization')

    # Plot normalized confusion matrix
plot_confusion_matrix(y_test, y_pred, classes = y_pred, normalize=True,
                      title='Normalized confusion matrix')

plt.show()

#k-fold cross validation evaluation
from sklearn.model_selection import cross_val_score
accuracy = cross_val_score(estimator= model, X = x_train, y = y_train, cv = 20)
accuracy.mean()
accuracy.std()


#visulizing the training result
from matplotlib.colors import ListedColormap
x_set, y_set = X_train_PCA, y_train
x1, x2 = np.meshgrid(np.arange(start = x_set[:, 0].min()-1, stop = x_set[:,0].max()+1, step = 0.01),
                     np.arange(start = x_set[:, 1].min()-1, stop = x_set[:, 1].max()+1, step = 0.01))
plt.contourf(x1,x2, model.predict(np.array([x1.ravel(),x2.ravel()]).T).reshape(x1.shape),
             alpha = 0.75, cmap = ListedColormap(("red", "green","pink")))
plt.xlim(x1.min(),x1.max())
plt.ylim(x2.min(),x2.max())

for i, j in enumerate(np.unique(y_set)):
    plt.scatter(x_set[y_set == j, 0], x_set[y_set == j, 1],
                 c = ListedColormap(("red", "green", "pink"))(i), label = j)

plt.title("Training set result")
plt.xlabel("PC1")
plt.ylabel("PC2")
plt.legend()
plt.show()

#visulizing the training result
x_set, y_set = X_test_PCA, y_test
x1, x2 = np.meshgrid(np.arange(start = x_set[:, 0].min()-1, stop = x_set[:,0].max()+1, step = 0.01),
                     np.arange(start = x_set[:, 1].min()-1, stop = x_set[:, 1].max()+1, step = 0.01))
plt.contourf(x1,x2, model.predict(np.array([x1.ravel(),x2.ravel()]).T).reshape(x1.shape),
             alpha = 0.75, cmap = ListedColormap(("orange", "blue", "purple")))
plt.xlim(x1.min(),x1.max())
plt.ylim(x2.min(),x2.max())
for i, j in enumerate(np.unique(y_set)):
    plt.scatter(x_set[y_set == j, 0], x_set[y_set == j, 1],
                 c = ListedColormap(("orange", "blue", "purple"))(i), label = j)
plt.title("Testing set result")
plt.xlabel("PC1")
plt.ylabel("PC2")
plt.legend()
plt.show()
